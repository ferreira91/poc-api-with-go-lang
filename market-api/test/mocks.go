// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/domain/market.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	domain "market-api/internal/core/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIMarket is a mock of IMarket interface.
type MockIMarket struct {
	ctrl     *gomock.Controller
	recorder *MockIMarketMockRecorder
}

// MockIMarketMockRecorder is the mock recorder for MockIMarket.
type MockIMarketMockRecorder struct {
	mock *MockIMarket
}

// NewMockIMarket creates a new mock instance.
func NewMockIMarket(ctrl *gomock.Controller) *MockIMarket {
	mock := &MockIMarket{ctrl: ctrl}
	mock.recorder = &MockIMarketMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMarket) EXPECT() *MockIMarketMockRecorder {
	return m.recorder
}

// GetCensusSector mocks base method.
func (m *MockIMarket) GetCensusSector() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCensusSector")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCensusSector indicates an expected call of GetCensusSector.
func (mr *MockIMarketMockRecorder) GetCensusSector() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCensusSector", reflect.TypeOf((*MockIMarket)(nil).GetCensusSector))
}

// GetDistrict mocks base method.
func (m *MockIMarket) GetDistrict() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDistrict")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDistrict indicates an expected call of GetDistrict.
func (mr *MockIMarketMockRecorder) GetDistrict() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDistrict", reflect.TypeOf((*MockIMarket)(nil).GetDistrict))
}

// GetID mocks base method.
func (m *MockIMarket) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockIMarketMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockIMarket)(nil).GetID))
}

// GetLatitude mocks base method.
func (m *MockIMarket) GetLatitude() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatitude")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLatitude indicates an expected call of GetLatitude.
func (mr *MockIMarketMockRecorder) GetLatitude() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatitude", reflect.TypeOf((*MockIMarket)(nil).GetLatitude))
}

// GetLongitude mocks base method.
func (m *MockIMarket) GetLongitude() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLongitude")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLongitude indicates an expected call of GetLongitude.
func (mr *MockIMarketMockRecorder) GetLongitude() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLongitude", reflect.TypeOf((*MockIMarket)(nil).GetLongitude))
}

// GetName mocks base method.
func (m *MockIMarket) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockIMarketMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockIMarket)(nil).GetName))
}

// GetNumber mocks base method.
func (m *MockIMarket) GetNumber() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumber")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNumber indicates an expected call of GetNumber.
func (mr *MockIMarketMockRecorder) GetNumber() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumber", reflect.TypeOf((*MockIMarket)(nil).GetNumber))
}

// GetReference mocks base method.
func (m *MockIMarket) GetReference() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReference")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetReference indicates an expected call of GetReference.
func (mr *MockIMarketMockRecorder) GetReference() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReference", reflect.TypeOf((*MockIMarket)(nil).GetReference))
}

// GetRegion5 mocks base method.
func (m *MockIMarket) GetRegion5() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegion5")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRegion5 indicates an expected call of GetRegion5.
func (mr *MockIMarketMockRecorder) GetRegion5() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegion5", reflect.TypeOf((*MockIMarket)(nil).GetRegion5))
}

// GetRegion8 mocks base method.
func (m *MockIMarket) GetRegion8() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegion8")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRegion8 indicates an expected call of GetRegion8.
func (mr *MockIMarketMockRecorder) GetRegion8() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegion8", reflect.TypeOf((*MockIMarket)(nil).GetRegion8))
}

// GetRegistry mocks base method.
func (m *MockIMarket) GetRegistry() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegistry")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRegistry indicates an expected call of GetRegistry.
func (mr *MockIMarketMockRecorder) GetRegistry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegistry", reflect.TypeOf((*MockIMarket)(nil).GetRegistry))
}

// GetStreet mocks base method.
func (m *MockIMarket) GetStreet() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStreet")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStreet indicates an expected call of GetStreet.
func (mr *MockIMarketMockRecorder) GetStreet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreet", reflect.TypeOf((*MockIMarket)(nil).GetStreet))
}

// GetSubprefecture mocks base method.
func (m *MockIMarket) GetSubprefecture() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubprefecture")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSubprefecture indicates an expected call of GetSubprefecture.
func (mr *MockIMarketMockRecorder) GetSubprefecture() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubprefecture", reflect.TypeOf((*MockIMarket)(nil).GetSubprefecture))
}

// GetSubprefectureCode mocks base method.
func (m *MockIMarket) GetSubprefectureCode() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubprefectureCode")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSubprefectureCode indicates an expected call of GetSubprefectureCode.
func (mr *MockIMarketMockRecorder) GetSubprefectureCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubprefectureCode", reflect.TypeOf((*MockIMarket)(nil).GetSubprefectureCode))
}

// GetTownship mocks base method.
func (m *MockIMarket) GetTownship() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTownship")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTownship indicates an expected call of GetTownship.
func (mr *MockIMarketMockRecorder) GetTownship() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTownship", reflect.TypeOf((*MockIMarket)(nil).GetTownship))
}

// GetTownshipCode mocks base method.
func (m *MockIMarket) GetTownshipCode() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTownshipCode")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTownshipCode indicates an expected call of GetTownshipCode.
func (mr *MockIMarketMockRecorder) GetTownshipCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTownshipCode", reflect.TypeOf((*MockIMarket)(nil).GetTownshipCode))
}

// GetWeightingArea mocks base method.
func (m *MockIMarket) GetWeightingArea() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeightingArea")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetWeightingArea indicates an expected call of GetWeightingArea.
func (mr *MockIMarketMockRecorder) GetWeightingArea() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeightingArea", reflect.TypeOf((*MockIMarket)(nil).GetWeightingArea))
}

// IsValid mocks base method.
func (m *MockIMarket) IsValid() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValid")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsValid indicates an expected call of IsValid.
func (mr *MockIMarketMockRecorder) IsValid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValid", reflect.TypeOf((*MockIMarket)(nil).IsValid))
}

// MockIMarketService is a mock of IMarketService interface.
type MockIMarketService struct {
	ctrl     *gomock.Controller
	recorder *MockIMarketServiceMockRecorder
}

// MockIMarketServiceMockRecorder is the mock recorder for MockIMarketService.
type MockIMarketServiceMockRecorder struct {
	mock *MockIMarketService
}

// NewMockIMarketService creates a new mock instance.
func NewMockIMarketService(ctrl *gomock.Controller) *MockIMarketService {
	mock := &MockIMarketService{ctrl: ctrl}
	mock.recorder = &MockIMarketServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMarketService) EXPECT() *MockIMarketServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIMarketService) Create(market domain.IMarket) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", market)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIMarketServiceMockRecorder) Create(market interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIMarketService)(nil).Create), market)
}

// DeleteByRegistry mocks base method.
func (m *MockIMarketService) DeleteByRegistry(registry string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByRegistry", registry)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByRegistry indicates an expected call of DeleteByRegistry.
func (mr *MockIMarketServiceMockRecorder) DeleteByRegistry(registry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByRegistry", reflect.TypeOf((*MockIMarketService)(nil).DeleteByRegistry), registry)
}

// Get mocks base method.
func (m *MockIMarketService) Get(longitude, latitude, censusSector, weightingArea, township, townshipCode, subprefectureCode, subprefecture, region5, region8, name, registry, street, number, district, reference string) ([]domain.IMarket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", longitude, latitude, censusSector, weightingArea, township, townshipCode, subprefectureCode, subprefecture, region5, region8, name, registry, street, number, district, reference)
	ret0, _ := ret[0].([]domain.IMarket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIMarketServiceMockRecorder) Get(longitude, latitude, censusSector, weightingArea, township, townshipCode, subprefectureCode, subprefecture, region5, region8, name, registry, street, number, district, reference interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIMarketService)(nil).Get), longitude, latitude, censusSector, weightingArea, township, townshipCode, subprefectureCode, subprefecture, region5, region8, name, registry, street, number, district, reference)
}

// GetAll mocks base method.
func (m *MockIMarketService) GetAll() ([]domain.IMarket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]domain.IMarket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIMarketServiceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIMarketService)(nil).GetAll))
}

// GetByID mocks base method.
func (m *MockIMarketService) GetByID(id string) (domain.IMarket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(domain.IMarket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIMarketServiceMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIMarketService)(nil).GetByID), id)
}

// Update mocks base method.
func (m *MockIMarketService) Update(id string, market domain.IMarket) (domain.IMarket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, market)
	ret0, _ := ret[0].(domain.IMarket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIMarketServiceMockRecorder) Update(id, market interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIMarketService)(nil).Update), id, market)
}

// MockIMarketPersistence is a mock of IMarketPersistence interface.
type MockIMarketPersistence struct {
	ctrl     *gomock.Controller
	recorder *MockIMarketPersistenceMockRecorder
}

// MockIMarketPersistenceMockRecorder is the mock recorder for MockIMarketPersistence.
type MockIMarketPersistenceMockRecorder struct {
	mock *MockIMarketPersistence
}

// NewMockIMarketPersistence creates a new mock instance.
func NewMockIMarketPersistence(ctrl *gomock.Controller) *MockIMarketPersistence {
	mock := &MockIMarketPersistence{ctrl: ctrl}
	mock.recorder = &MockIMarketPersistenceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMarketPersistence) EXPECT() *MockIMarketPersistenceMockRecorder {
	return m.recorder
}

// DeleteByRegistry mocks base method.
func (m *MockIMarketPersistence) DeleteByRegistry(registry string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByRegistry", registry)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByRegistry indicates an expected call of DeleteByRegistry.
func (mr *MockIMarketPersistenceMockRecorder) DeleteByRegistry(registry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByRegistry", reflect.TypeOf((*MockIMarketPersistence)(nil).DeleteByRegistry), registry)
}

// Find mocks base method.
func (m *MockIMarketPersistence) Find(longitude, latitude, censusSector, weightingArea, township, townshipCode, subprefectureCode, subprefecture, region5, region8, name, registry, street, number, district, reference string) ([]domain.IMarket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", longitude, latitude, censusSector, weightingArea, township, townshipCode, subprefectureCode, subprefecture, region5, region8, name, registry, street, number, district, reference)
	ret0, _ := ret[0].([]domain.IMarket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockIMarketPersistenceMockRecorder) Find(longitude, latitude, censusSector, weightingArea, township, townshipCode, subprefectureCode, subprefecture, region5, region8, name, registry, street, number, district, reference interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockIMarketPersistence)(nil).Find), longitude, latitude, censusSector, weightingArea, township, townshipCode, subprefectureCode, subprefecture, region5, region8, name, registry, street, number, district, reference)
}

// FindAll mocks base method.
func (m *MockIMarketPersistence) FindAll() ([]domain.IMarket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]domain.IMarket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockIMarketPersistenceMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockIMarketPersistence)(nil).FindAll))
}

// FindByID mocks base method.
func (m *MockIMarketPersistence) FindByID(id string) (domain.IMarket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(domain.IMarket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockIMarketPersistenceMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockIMarketPersistence)(nil).FindByID), id)
}

// Save mocks base method.
func (m *MockIMarketPersistence) Save(market domain.IMarket) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", market)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockIMarketPersistenceMockRecorder) Save(market interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIMarketPersistence)(nil).Save), market)
}

// Update mocks base method.
func (m *MockIMarketPersistence) Update(id string, market domain.IMarket) (domain.IMarket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, market)
	ret0, _ := ret[0].(domain.IMarket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIMarketPersistenceMockRecorder) Update(id, market interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIMarketPersistence)(nil).Update), id, market)
}

// MockIMarketReaderPersistence is a mock of IMarketReaderPersistence interface.
type MockIMarketReaderPersistence struct {
	ctrl     *gomock.Controller
	recorder *MockIMarketReaderPersistenceMockRecorder
}

// MockIMarketReaderPersistenceMockRecorder is the mock recorder for MockIMarketReaderPersistence.
type MockIMarketReaderPersistenceMockRecorder struct {
	mock *MockIMarketReaderPersistence
}

// NewMockIMarketReaderPersistence creates a new mock instance.
func NewMockIMarketReaderPersistence(ctrl *gomock.Controller) *MockIMarketReaderPersistence {
	mock := &MockIMarketReaderPersistence{ctrl: ctrl}
	mock.recorder = &MockIMarketReaderPersistenceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMarketReaderPersistence) EXPECT() *MockIMarketReaderPersistenceMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockIMarketReaderPersistence) Find(longitude, latitude, censusSector, weightingArea, township, townshipCode, subprefectureCode, subprefecture, region5, region8, name, registry, street, number, district, reference string) ([]domain.IMarket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", longitude, latitude, censusSector, weightingArea, township, townshipCode, subprefectureCode, subprefecture, region5, region8, name, registry, street, number, district, reference)
	ret0, _ := ret[0].([]domain.IMarket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockIMarketReaderPersistenceMockRecorder) Find(longitude, latitude, censusSector, weightingArea, township, townshipCode, subprefectureCode, subprefecture, region5, region8, name, registry, street, number, district, reference interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockIMarketReaderPersistence)(nil).Find), longitude, latitude, censusSector, weightingArea, township, townshipCode, subprefectureCode, subprefecture, region5, region8, name, registry, street, number, district, reference)
}

// FindAll mocks base method.
func (m *MockIMarketReaderPersistence) FindAll() ([]domain.IMarket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]domain.IMarket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockIMarketReaderPersistenceMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockIMarketReaderPersistence)(nil).FindAll))
}

// FindByID mocks base method.
func (m *MockIMarketReaderPersistence) FindByID(id string) (domain.IMarket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(domain.IMarket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockIMarketReaderPersistenceMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockIMarketReaderPersistence)(nil).FindByID), id)
}

// MockIMarketWriterPersistence is a mock of IMarketWriterPersistence interface.
type MockIMarketWriterPersistence struct {
	ctrl     *gomock.Controller
	recorder *MockIMarketWriterPersistenceMockRecorder
}

// MockIMarketWriterPersistenceMockRecorder is the mock recorder for MockIMarketWriterPersistence.
type MockIMarketWriterPersistenceMockRecorder struct {
	mock *MockIMarketWriterPersistence
}

// NewMockIMarketWriterPersistence creates a new mock instance.
func NewMockIMarketWriterPersistence(ctrl *gomock.Controller) *MockIMarketWriterPersistence {
	mock := &MockIMarketWriterPersistence{ctrl: ctrl}
	mock.recorder = &MockIMarketWriterPersistenceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMarketWriterPersistence) EXPECT() *MockIMarketWriterPersistenceMockRecorder {
	return m.recorder
}

// DeleteByRegistry mocks base method.
func (m *MockIMarketWriterPersistence) DeleteByRegistry(registry string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByRegistry", registry)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByRegistry indicates an expected call of DeleteByRegistry.
func (mr *MockIMarketWriterPersistenceMockRecorder) DeleteByRegistry(registry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByRegistry", reflect.TypeOf((*MockIMarketWriterPersistence)(nil).DeleteByRegistry), registry)
}

// Save mocks base method.
func (m *MockIMarketWriterPersistence) Save(market domain.IMarket) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", market)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockIMarketWriterPersistenceMockRecorder) Save(market interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIMarketWriterPersistence)(nil).Save), market)
}

// Update mocks base method.
func (m *MockIMarketWriterPersistence) Update(id string, market domain.IMarket) (domain.IMarket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, market)
	ret0, _ := ret[0].(domain.IMarket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIMarketWriterPersistenceMockRecorder) Update(id, market interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIMarketWriterPersistence)(nil).Update), id, market)
}
